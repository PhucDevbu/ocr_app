import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:docx_template/docx_template.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/services.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:google_mlkit_text_recognition/google_mlkit_text_recognition.dart';
import 'package:image_editor_plus/image_editor_plus.dart';
import 'package:ocr_app/model/result.dart';
import 'package:share_plus/share_plus.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

import 'package:image_cropper/image_cropper.dart';
import 'package:ocr_app/screen/text_to_speech_page.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as path;
import 'package:http/http.dart' as http;
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pdfWidgets;

import '../model/image_app.dart';
import 'edit_text_page.dart';

class DetailsPage extends StatefulWidget {
  static const routeName = 'DetailsPage';
  const DetailsPage({super.key});

  @override
  State<DetailsPage> createState() => _DetailsPageState();
}

class _DetailsPageState extends State<DetailsPage> {
  late TextEditingController _textController;
  late TextEditingController _dialogController;
  @override
  void initState() {
    _textController = TextEditingController();
    _dialogController = TextEditingController();

    super.initState();
  }

  @override
  void dispose() {
    _textController.dispose();
    _dialogController.dispose();
    super.dispose();
  }

  Future<File> _downloadImage(String url) async {
    final response = await http.get(Uri.parse(url));
    final directory = await getApplicationDocumentsDirectory();
    final fileName = path.basename(url); // extract file name from url
    final file =
        File('${directory.path}/$fileName'); // create file path with file name
    await file.writeAsBytes(response.bodyBytes);
    return file;
  }

  Future<void> convertImageUrlToPdfAndShare(
      String imageUrl, String name) async {
    final response = await http.get(Uri.parse(imageUrl));
    final bytes = response.bodyBytes;

    final image = pdfWidgets.MemoryImage(bytes);

    final pdfDoc = pdfWidgets.Document();
    final page = pdfWidgets.Page(
      build: (context) => pdfWidgets.Center(
        child: pdfWidgets.Image(image),
      ),
    );
    pdfDoc.addPage(page);

    final outputDir = await getTemporaryDirectory();
    final outputFile = File('${outputDir.path}/$name.pdf');

    // Kiểm tra xem tệp PDF đã được tạo ra và lưu trữ đúng định dạng chưa
    try {
      await outputFile.writeAsBytes(await pdfDoc.save());
      final bytesPdf = await outputFile.readAsBytes();
      if (bytesPdf != null && bytesPdf.isNotEmpty) {
        await Share.shareFiles(
          [outputFile.path],
          text: 'PDF generated by MyApp',
          subject: 'PDF generated by MyApp',
          mimeTypes: ['application/pdf'],
          sharePositionOrigin: Rect.zero,
        );
      } else {
        throw Exception('Failed to generate PDF file');
      }
    } catch (e) {
      print('Failed to generate or share PDF: $e');
    }
  }

  Future<Uint8List> convertFileToUint8List(File file) async {
    List<int> bytes = await file.readAsBytes();
    Uint8List uint8List = Uint8List.fromList(bytes);
    return uint8List;
  }

  Future<File> convertUint8ListToFile(
      Uint8List uint8List, String filePath) async {
    File file = File(filePath);
    await file.writeAsBytes(uint8List);
    return file;
  }

  Future<void> _OCRImage(String imageUrl) async {
    final downloadedFile = await _downloadImage(imageUrl);
    final data = await convertFileToUint8List(downloadedFile);
    final editedImage = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ImageEditor(
          image: data, // <-- Uint8List of image
          appBar: Colors.blue,
        ),
      ),
    );

    if (editedImage != null) {
      final directory = await getApplicationDocumentsDirectory();
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileName = 'image_$timestamp.jpg';
      final data = await convertUint8ListToFile(
          editedImage, '${directory.path}/$fileName');
      final inputImage = InputImage.fromFile(File(data.path));
      final textRecognizer =
          TextRecognizer(script: TextRecognitionScript.latin);
      final RecognizedText recognisedText =
          await textRecognizer.processImage(inputImage);

      String resultText = '';
      for (TextBlock block in recognisedText.blocks) {
        for (TextLine line in block.lines) {
          resultText += line.text + '\n';
        }
      }

      textRecognizer.close();

      _textController.text = resultText;
      if (_textController.text != "") {
        Result result = Result(
            text: _textController.text,
            url: imageUrl,
            createAt: DateTime.now().toString(),
            uId: FirebaseAuth.instance.currentUser!.uid);
        await FirebaseFirestore.instance
            .collection("results")
            .add(result.toMap());
      } else {
        _textController.text = "Can't Recognizer";
      }

      setState(() {});
    }
  }

  Future<void> shareTxtFile(String content, String name) async {
    final directory = await getApplicationDocumentsDirectory();
    final file = File('${directory.path}/$name.txt');
    await file.writeAsString(content);
    await Share.shareFiles([file.path], text: 'Share via');
  }

  Future<void> shareWordFile(String content, String name) async {
    final data = await rootBundle.load('assets/template.docx');
    final bytes = data.buffer.asUint8List();

    final template = await DocxTemplate.fromBytes(bytes);
    Content c = Content();
    c.add(TextContent("docname", content));
    final d = await template.generate(c);
    final directory = await getApplicationDocumentsDirectory();
    final of = File('${directory.path}/$name.docx');
    if (d != null) await of.writeAsBytes(d);
    await Share.shareFiles([of.path], text: 'Share Word file');
  }

  Future<void> editText() async {
    // Navigate to a new screen where the user can edit the text
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => EditTextPage(controller: _textController),
      ),
    ).then((value) => setState(() {}));

    // Update the text with the new value returned from the editor screen
  }

  @override
  Widget build(BuildContext context) {
    final imageId = ModalRoute.of(context)?.settings.arguments as ImageApp;
    return GestureDetector(
      onTap: () => FocusManager.instance.primaryFocus?.unfocus(),
      child: Scaffold(
        appBar: AppBar(title: Text(imageId.title)),
        body: SingleChildScrollView(
          child: Column(children: [
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 8.w),
              child: Container(
                  decoration: BoxDecoration(
                      border: Border.all(width: 2.w, color: Colors.black)),
                  child: Image.network(
                    imageId.url,
                    fit: BoxFit.cover,
                  )),
            ),
            SizedBox(
              height: 16.h,
            ),
            ElevatedButton(
              onPressed: () => _OCRImage(imageId.url),
              child: const Text('Recognize Text'),
            ),
            const SizedBox(height: 16),
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 8.w),
              child: Container(
                decoration: BoxDecoration(
                    border: Border.all(width: 2.w, color: Colors.black)),
                child: Padding(
                  padding: EdgeInsets.symmetric(horizontal: 8.w),
                  child: Text(
                    _textController.text,
                    style: TextStyle(fontSize: 16.sp),
                    maxLines: null,
                  ),
                ),
              ),
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                IconButton(
                  onPressed: editText,
                  icon: Icon(Icons.edit),
                ),
                IconButton(
                  onPressed: () {
                    Clipboard.setData(ClipboardData(text: _textController.text))
                        .then((value) {
                      // Thông báo copy thành công
                      Fluttertoast.showToast(msg: 'Copied to clipboard');
                    });
                  },
                  icon: Icon(Icons.copy),
                ),
                IconButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => TextToSpeechPage(
                          text: _textController.text,
                        ),
                      ),
                    );
                  },
                  icon: Icon(Icons.volume_up),
                ),
                IconButton(
                  onPressed: () {
                    showDialog(
                      context: context,
                      builder: (BuildContext context) {
                        return AlertDialog(
                          title: Text('Enter Name PDF File'),
                          content: TextField(
                            controller: _dialogController,
                            decoration:
                                InputDecoration(hintText: "Enter text here"),
                          ),
                          actions: <Widget>[
                            TextButton(
                              child: Text('Cancel'),
                              onPressed: () {
                                Navigator.of(context).pop();
                              },
                            ),
                            TextButton(
                              child: Text('OK'),
                              onPressed: () {
                                convertImageUrlToPdfAndShare(
                                    imageId.url, _dialogController.text);
                              },
                            ),
                          ],
                        );
                      },
                    );
                  },
                  icon: Icon(Icons.picture_as_pdf),
                ),
                IconButton(
                  onPressed: () {
                    showDialog(
                      context: context,
                      builder: (BuildContext context) {
                        return AlertDialog(
                          title: Text('Enter Name Txt File'),
                          content: TextField(
                            controller: _dialogController,
                            decoration:
                                InputDecoration(hintText: "Enter text here"),
                          ),
                          actions: <Widget>[
                            TextButton(
                              child: Text('Cancel'),
                              onPressed: () {
                                Navigator.of(context).pop();
                              },
                            ),
                            TextButton(
                              child: Text('OK'),
                              onPressed: () {
                                shareTxtFile(_textController.text,
                                    _dialogController.text);
                              },
                            ),
                          ],
                        );
                      },
                    );
                  },
                  icon: Icon(Icons.text_fields),
                ),
                IconButton(
                  onPressed: () {
                    showDialog(
                      context: context,
                      builder: (BuildContext context) {
                        return AlertDialog(
                          title: Text('Enter Name Word File'),
                          content: TextField(
                            controller: _dialogController,
                            decoration:
                                InputDecoration(hintText: "Enter text here"),
                          ),
                          actions: <Widget>[
                            TextButton(
                              child: Text('Cancel'),
                              onPressed: () {
                                Navigator.of(context).pop();
                              },
                            ),
                            TextButton(
                              child: Text('OK'),
                              onPressed: () {
                                shareWordFile(_textController.text,
                                    _dialogController.text);
                              },
                            ),
                          ],
                        );
                      },
                    );
                  },
                  icon: Icon(Icons.description),
                ),
              ],
            ),
          ]),
        ),
      ),
    );
  }
}
